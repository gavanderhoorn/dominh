
-- Copyright (c) 2022, G.A. vd. Hoorn
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.


PROGRAM dmh_simkey
--------------------------------------------------------------------------------
--
-- Emulate pressing a key on the TP. Keycodes come in over a GET request.
--
-- NOTE: this is not a complete solution. The remote TP will still be more
--       robust and full featured.
--
-- author: G.A. vd. Hoorn
--
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'DOMINH//r1'
%INVISIBLE
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR
%UNINITVARS




--------------------------------------------------------------------------------
--
-- remote types & constants
--
--------------------------------------------------------------------------------




--------------------------------------------------------------------------------
--
-- local types & constants
--
--------------------------------------------------------------------------------
CONST
	RESP_FILE    = 'TD:\RESPONSE.HTM'
	RESP_OMODE   = 'RW'
	KB_NAME      = 'TPKB'
	MAX_SHORT    = 32767




--------------------------------------------------------------------------------
--
-- local variables
--
--------------------------------------------------------------------------------
VAR
	fd_          : FILE
	stat_        : INTEGER
	success_     : BOOLEAN
	key_code_    : INTEGER

	-- GET params
	kc           : STRING[6]




--------------------------------------------------------------------------------
--
-- remote routine prototypes
--
--------------------------------------------------------------------------------
ROUTINE STRG_TO_INT(text:STRING): INTEGER FROM klutlext




--------------------------------------------------------------------------------
--
-- local routine(s) (prototypes)
--
--------------------------------------------------------------------------------
ROUTINE is_digit_(str : STRING) : BOOLEAN FROM dmh_simkey
ROUTINE w_error_(fd : FILE; reason : STRING) FROM dmh_simkey
ROUTINE w_error2_(fd : FILE; reason : STRING; val : INTEGER) FROM dmh_simkey
ROUTINE check_getp_ : INTEGER FROM dmh_simkey
ROUTINE reset_getp_ FROM dmh_simkey




--------------------------------------------------------------------------------
--
-- Body
--
--------------------------------------------------------------------------------
BEGIN
	OPEN FILE fd_(RESP_OMODE, RESP_FILE)
	stat_ = IO_STATUS(fd_)
	IF (stat_ <> 0) THEN
		-- TODO: post some error/warning using POST_ERR
		GOTO lbl_exit0
	ENDIF

	-- make sure all required parameters are provided
	IF ((check_getp_ <> 0) OR (kc = '')) THEN
		w_error_(fd_, 'missing parameter')
		GOTO lbl_exit0
	ENDIF

	-- try to catch ridiculous values for 'kc' GET param
	IF (STR_LEN(kc) > 5) THEN
		w_error_(fd_, 'invalid kc: too long')
		GOTO lbl_exit0
	ENDIF

	-- only digits are acceptable
	IF (NOT is_digit_(kc)) THEN
		w_error_(fd_, 'invalid kc: only digits allowed')
		GOTO lbl_exit0
	ENDIF

	-- attempt conversion
	key_code_ = strg_to_int(kc)

	reset_getp_

	-- check GET params
	IF (UNINIT(key_code_)) THEN
		w_error_(fd_, 'conversion error')
		GOTO lbl_exit0
	ENDIF

	-- apply 'some' sanity check(s)
	-- NOTE: the max value is an assumption. TP keys can be "two bytes"
	--       according to 'klevkeys.kl', but it's unclear whether that
	--       means unsigned or signed shorts. As every other integer
	--       type in Karel is signed, I'll assume signed short here as
	--       well.
	IF ((key_code_ < 0) OR (key_code_ > MAX_SHORT)) THEN
		w_error2_(fd_, 'invalid key:', key_code_)
		GOTO lbl_exit0
	ENDIF

	-- process
	-- NOTE: no error checking, as SIM_KEY does not return anything
	WRITE TPDISPLAY('key:', key_code_, CR)
	SIM_KEY(KB_NAME, key_code_)

	-- reset
	key_code_ = -1

	-- done
	success_ = TRUE

	-- write out response document
	WRITE fd_('{"op" : "sim_key"')

	-- BOOLEANs stringify to uppercase TRUE and FALSE, so we can't just
	-- use WRITE to stringify it for us.
	WRITE fd_(', "success" : ')
	IF (success_) THEN
		WRITE fd_('true')
	ELSE
		WRITE fd_('false')
	ENDIF

	-- end of dict (and of file)
	WRITE fd_('}', CR)

lbl_exit0::
	CLOSE FILE fd_
END dmh_simkey




ROUTINE is_digit_
VAR
	i__ : INTEGER
	c__ : INTEGER
BEGIN
	FOR i__ = 1 TO STR_LEN(str) DO
		c__ = ORD(str, i__)
		IF (c__ < 48) OR (c__ > 57) THEN
			RETURN (FALSE)
		ENDIF
	ENDFOR
	RETURN (TRUE)
END is_digit_



ROUTINE w_error_
BEGIN
	WRITE fd('{"op" : "sim_key", "result" : "error", "reason" : "', reason ,'"}', CR)
END w_error_




ROUTINE w_error2_
BEGIN
	WRITE fd('{"result" : "error", "reason" : "', reason , val, '"}', CR)
END w_error2_




ROUTINE check_getp_
BEGIN
	IF (UNINIT(kc)) THEN
		RETURN (-1)
	ENDIF
	RETURN (0)
END check_getp_




ROUTINE reset_getp_
BEGIN
	kc = ''
END reset_getp_
